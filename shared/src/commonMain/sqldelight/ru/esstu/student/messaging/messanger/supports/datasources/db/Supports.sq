import ru.esstu.student.messaging.messenger.datasources.db.cache.entities.ReplyMessageEntity;
import ru.esstu.student.messaging.messenger.datasources.db.cache.entities.UserEntity;
CREATE TABLE MessageSuppotTable(
    messageId INTEGER PRIMARY KEY NOT NULL,
    fromUser TEXT AS UserEntity,
    date INTEGER NOT NULL,
    message TEXT NOT NULL,
    status  TEXT NOT NULL,
    replyMessage TEXT AS ReplyMessageEntity,
    countAttachments INTEGER AS Int
);



CREATE TABLE SuppotTable(
      appUserId TEXT NOT NULL,
      idConversation INTEGER PRIMARY KEY NOT NULL,
      title TEXT NOT NULL,
      author TEXT AS UserEntity,
      lastMessageId INTEGER,
      notifyAboutIt INTEGER AS Boolean NOT NULL,
      unread INTEGER AS Int DEFAULT 0 NOT NULL,
      FOREIGN KEY (lastMessageId) REFERENCES MessageSuppotTable(messageId) ON DELETE CASCADE
);


setLastMessage:
    INSERT OR REPLACE INTO MessageSuppotTable(messageId, fromUser,date, message, status, replyMessage, countAttachments)
       VALUES (?,?,?,?,?,?,?);

setDialog:
    INSERT OR REPLACE INTO SuppotTable(appUserId, idConversation, title, author, lastMessageId, notifyAboutIt, unread)
        VALUES (?,?,?,?,?,?,?);


getDialogsWithLastMessage:
    SELECT d.*, m.* FROM MessageSuppotTable d
    LEFT JOIN SuppotTable m ON d.messageId == m.lastMessageId
    ORDER BY d.date DESC LIMIT :pageSize OFFSET :pageOffset;

clear:
    DELETE FROM MessageSuppotTable;

getDialog:
    SELECT * FROM SuppotTable
        WHERE idConversation = :idConversation AND  appUserId = :appUserId;


deleteDialog:
    DELETE FROM MessageSuppotTable WHERE messageId = (:lastMessageId);

