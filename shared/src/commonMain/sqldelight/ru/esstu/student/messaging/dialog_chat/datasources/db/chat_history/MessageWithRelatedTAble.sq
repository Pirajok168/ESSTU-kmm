
import ru.esstu.student.messaging.dialog_chat.datasources.db.chat_history.entities.DialogChatAuthorEntity;



CREATE TABLE DialogChatMessageTable(
    messageId INTEGER PRIMARY KEY,
    appUserId TEXT NOT NULL,
    opponentId TEXT,
    fromSend TEXT AS DialogChatAuthorEntity NOT NULL,
    replyMessageId INTEGER,
    date INTEGER NOT NULL,
    message TEXT,
    status TEXT
);

CREATE TABLE DialogChatAttachmentTable(
    idAttachment INTEGER PRIMARY KEY NOT NULL,
    messageId INTEGER NOT NULL ,
    fileUri TEXT,
    LocalFileUri TEXT,
    loadProgress REAL,
    name TEXT,
    ext TEXT,
    size INTEGER NOT NULL,
    type TEXT
);

CREATE TABLE DialogChatReplyMessageTable(
    idReplyMessage INTEGER PRIMARY KEY,
    fromSendReplyMessage TEXT AS DialogChatAuthorEntity,
    dateReplyMessage INTEGER,
    messageReplayMessage TEXT,
    attachmentsCount INTEGER
);

CREATE TABLE ErredMessageTable(
    idErredMessage INTEGER PRIMARY KEY NOT NULL,
    appUserId TEXT NOT NULL,
    dialogId TEXT NOT NULL,
    date INTEGER NOT NULL,
    text TEXT NOT NULL,
    replyMessageId INTEGER
);

CREATE TABLE ErredCachedFileTable(
    idCahedFile INTEGER AS Int PRIMARY KEY,

    messageId INTEGER NOT NULL,
    name TEXT NOT NULL,
    ext TEXT NOT NULL,
    size INTEGER NOT NULL,
    type TEXT NOT NULL,
    FOREIGN KEY (messageId) REFERENCES ErredMessageTable(idErredMessage) ON DELETE CASCADE
);

getCachedFiles:
    SELECT * FROM ErredCachedFileTable WHERE messageId == (:messageId);


getReplyMessage:
    SELECT t.*, o.*, q.*
            FROM DialogChatMessageTable t
            LEFT JOIN DialogChatAttachmentTable o ON t.messageId == o.messageId
            LEFT JOIN DialogChatReplyMessageTable q ON t.replyMessageId == q.idReplyMessage
            WHERE t.messageId == (:messageId) ;


getErredMessages:
    SELECT * FROM ErredMessageTable WHERE appUserId == (:appUserId) AND dialogId == (:dialogId);

removeMessage:
    DELETE FROM ErredMessageTable WHERE idErredMessage == (:id);

addMessage:
    INSERT OR REPLACE INTO ErredMessageTable(idErredMessage,appUserId,dialogId,date,text,replyMessageId)
        VALUES(?,?,?,?,?,?);

addCachedFiles:
    INSERT OR REPLACE INTO ErredCachedFileTable(idCahedFile,messageId,name,ext,size,type)
        VALUES (?,?,?,?,?,?);

test:
    SELECT  * FROM  DialogChatMessageTable;

insertMessage:
    INSERT OR REPLACE INTO DialogChatMessageTable(messageId, opponentId, fromSend,replyMessageId,date,message,status, appUserId)
        VALUES(?, ?, ?, ?, ?, ?, ?, ?);

insertAttachments:
    INSERT OR REPLACE INTO DialogChatAttachmentTable(idAttachment, messageId, fileUri,LocalFileUri,name,ext,size, type)
        VALUES(?, ?, ?, ?, ?, ?, ?, ?);

clearAttachments:
    DELETE FROM DialogChatAttachmentTable WHERE messageId == (:messageId);


insertReply:
    INSERT OR REPLACE INTO DialogChatReplyMessageTable(idReplyMessage, fromSendReplyMessage, dateReplyMessage,messageReplayMessage,attachmentsCount)
        VALUES(?, ?, ?, ?, ?);

getMessageHistory:
    SELECT t.*, o.*, q.*
        FROM DialogChatMessageTable t
        LEFT JOIN DialogChatAttachmentTable o ON t.messageId == o.messageId
        LEFT JOIN DialogChatReplyMessageTable q ON t.replyMessageId == q.idReplyMessage
        WHERE t.appUserId == (:appUserId) AND t.opponentId == (:opponentId)
        ORDER BY date DESC LIMIT (:limit) OFFSET (:offset);


CREATE TABLE DialogChatAuthorTable (
    id TEXT PRIMARY KEY NOT NULL,
    fitstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    patronymic TEXT NOT NULL,
    summary TEXT NOT NULL,
    photo TEXT NOT NULL
);

getOpponent:
   SELECT * FROM DialogChatAuthorTable WHERE id == (:id) LIMIT 1;

insert:
    INSERT OR REPLACE INTO DialogChatAuthorTable(id, fitstName, lastName,patronymic,summary,photo)
        VALUES(?,?,?,?,?,?);
clear:
    DELETE FROM DialogChatAuthorTable WHERE id == :id;